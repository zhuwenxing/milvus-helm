{{- if .Values.tikv.enabled }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: pd
    app.kubernetes.io/instance: {{ template "milvus.tikv.fullname" . }}
    app.kubernetes.io/name: tikv
  name: {{ template "milvus.tikv.fullname" . }}-pd
spec:
  podManagementPolicy: Parallel
  replicas: {{ .Values.tikv.pd.replicaCount }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: pd
      app.kubernetes.io/instance: {{ template "milvus.tikv.fullname" . }}
      app.kubernetes.io/name: tikv
  serviceName: {{ template "milvus.tikv.fullname" . }}-pd-headless
  template:
    metadata:
      labels:
        app.kubernetes.io/component: pd
        app.kubernetes.io/instance: {{ template "milvus.tikv.fullname" . }}
        app.kubernetes.io/name: tikv
    spec:
      containers:
      - command:
        - /bin/sh
        - /usr/local/bin/pd_start_script.sh
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: PEER_SERVICE_NAME
          value: {{ template "milvus.tikv.fullname" . }}-pd-headless
        - name: SERVICE_NAME
          value: {{ template "milvus.tikv.fullname" . }}-pd
        - name: SET_NAME
          value: {{ template "milvus.tikv.fullname" . }}-pd
        - name: TZ
          value: UTC
        image: {{ .Values.tikv.pd.image }}
        imagePullPolicy: IfNotPresent
        name: pd
        ports:
        - containerPort: 2380
          name: server
          protocol: TCP
        - containerPort: 2379
          name: client
          protocol: TCP
        resources:
          {{- toYaml .Values.tikv.pd.resources | nindent 10 }}
        volumeMounts:
        - mountPath: /etc/podinfo
          name: annotations
          readOnly: true
        - mountPath: /etc/pd
          name: config
          readOnly: true
        - mountPath: /usr/local/bin
          name: startup-script
          readOnly: true
        - mountPath: /var/lib/pd
          name: pd
      volumes:
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.annotations
            path: annotations
        name: annotations
      - configMap:
          items:
          - key: config-file
            path: pd.toml
          name: {{ template "milvus.tikv.fullname" . }}-pd
        name: config
      - configMap:
          items:
          - key: startup-script
            path: pd_start_script.sh
          name: {{ template "milvus.tikv.fullname" . }}-pd
        name: startup-script
      {{- if not .Values.tikv.pd.persistence.enabled }}
      - name: pd
        emptyDir: {}
      {{- end }}
  updateStrategy:
    rollingUpdate:
      partition: 1
    type: RollingUpdate
  {{- if .Values.tikv.pd.persistence.enabled }}
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: pd
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.tikv.pd.persistence.size }}
  {{- end }}
---
apiVersion: v1
data:
  config-file: ""
  startup-script: |
    #!/bin/sh

    # This script is used to start pd containers in kubernetes cluster

    # Use DownwardAPIVolumeFiles to store informations of the cluster:
    # https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/#the-downward-api
    #
    #   runmode="normal/debug"
    #

    set -uo pipefail

    ANNOTATIONS="/etc/podinfo/annotations"

    if [[ ! -f "${ANNOTATIONS}" ]]
    then
        echo "${ANNOTATIONS} does't exist, exiting."
        exit 1
    fi
    source ${ANNOTATIONS} 2>/dev/null

    runmode=${runmode:-normal}
    if [[ X${runmode} == Xdebug ]]
    then
        echo "entering debug mode."
        tail -f /dev/null
    fi

    # Use HOSTNAME if POD_NAME is unset for backward compatibility.
    POD_NAME=${POD_NAME:-$HOSTNAME}
    # the general form of variable PEER_SERVICE_NAME is: "<clusterName>-pd-peer"
    cluster_name=`echo ${PEER_SERVICE_NAME} | sed 's/-pd-headless//'`
    domain="${POD_NAME}.${PEER_SERVICE_NAME}.${NAMESPACE}.svc.cluster.local"
    encoded_domain_url=`echo ${domain}:2380 | base64 | tr "\n" " " | sed "s/ //g"`
    elapseTime=0
    period=1
    threshold=30
    while true; do
    sleep ${period}
    elapseTime=$(( elapseTime+period ))

    if [[ ${elapseTime} -ge ${threshold} ]]
    then
    echo "waiting for pd cluster ready timeout" >&2
    exit 1
    fi

    if nslookup ${domain} 2>/dev/null
    then
    echo "nslookup domain ${domain} success"
    break
    else
    echo "nslookup domain ${domain} failed" >&2
    fi
    done

    ARGS="--data-dir=/var/lib/pd \
    --name=${POD_NAME} \
    --peer-urls=http://0.0.0.0:2380 \
    --advertise-peer-urls=http://${domain}:2380 \
    --client-urls=http://0.0.0.0:2379 \
    --advertise-client-urls=http://${domain}:2379 \
    --config=/etc/pd/pd.toml \
    "

    if [[ -f /var/lib/pd/join ]]
    then
    # The content of the join file is:
    #   demo-pd-0=http://demo-pd-0.demo-pd-peer.demo.svc:2380,demo-pd-1=http://demo-pd-1.demo-pd-peer.demo.svc:2380
    # The --join args must be:
    #   --join=http://demo-pd-0.demo-pd-peer.demo.svc:2380,http://demo-pd-1.demo-pd-peer.demo.svc:2380
    join=`cat /var/lib/pd/join | tr "," "\n" | awk -F'=' '{print $2}' | tr "\n" ","`
    join=${join%,}
    ARGS="${ARGS} --join=${join}"
    elif [[ ! -d /var/lib/pd/member/wal ]]
    then
    {{- $replicaCount := int .Values.tikv.pd.replicaCount }}
    {{- $peerPort := 2380 }}
    {{- $name := include "milvus.tikv.fullname" . }}
    {{- $fullname := printf "%s-%s" $name "pd" }}
    {{- $releaseNamespace := .Release.Namespace }}
    {{- $headlessServiceName := printf "%s-%s" $fullname "headless" }}
    {{- $clusterDomain := "cluster.local" }}
    {{- $peerProtocol := "http" }}
    {{- $initialCluster := list }}
    {{- $joinCluster := list }}
    {{- range $e, $i := until $replicaCount }}
    {{- $initialCluster = append $initialCluster (printf "%s-%d=%s://%s-%d.%s.%s.svc.%s:%d" $fullname $i $peerProtocol $fullname $i $headlessServiceName $releaseNamespace $clusterDomain $peerPort) }}
    {{- $joinCluster = append $joinCluster (printf "%s://%s-%d.%s.%s.svc.%s:%d" $peerProtocol $fullname $i $headlessServiceName $releaseNamespace $clusterDomain $peerPort)}}
    {{- end }}
    {{- if .Release.IsInstall }}
    result={{ join "," $initialCluster | quote }}
    ARGS="${ARGS} --initial-cluster=${result}"
    {{- else }}
    result={{ join "," $joinCluster | quote }}
    ARGS="${ARGS} --join=${result}"
    {{- end }}
    fi

    echo "starting pd-server ..."
    sleep $((RANDOM % 10))
    echo "/pd-server ${ARGS}"
    exec /pd-server ${ARGS}
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: pd
    app.kubernetes.io/instance: {{ template "milvus.tikv.fullname" . }}
    app.kubernetes.io/name: tikv
  name: {{ template "milvus.tikv.fullname" . }}-pd
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: pd
    app.kubernetes.io/instance: {{ template "milvus.tikv.fullname" . }}
    app.kubernetes.io/name: tikv
  name: {{ template "milvus.tikv.fullname" . }}-pd-headless
spec:
  clusterIP: None
  ports:
  - name: tcp-peer-2380
    port: 2380
    protocol: TCP
    targetPort: 2380
  - name: tcp-peer-2379
    port: 2379
    protocol: TCP
    targetPort: 2379
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/component: pd
    app.kubernetes.io/instance: {{ template "milvus.tikv.fullname" . }}
    app.kubernetes.io/name: tikv
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: pd
    app.kubernetes.io/instance: {{ template "milvus.tikv.fullname" . }}
    app.kubernetes.io/name: tikv
  name: {{ template "milvus.tikv.fullname" . }}-pd
spec:
  ports:
  - name: client
    port: 2379
    protocol: TCP
    targetPort: 2379
  selector:
    app.kubernetes.io/component: pd
    app.kubernetes.io/instance: {{ template "milvus.tikv.fullname" .}}
    app.kubernetes.io/name: tikv
  type: ClusterIP
---
apiVersion: v1
data:
  config-file: |
    [raftdb]
      max-open-files = 256

    [rocksdb]
      max-open-files = 256

    [storage]
      reserve-space = "0MB"
  startup-script: "#!/bin/sh\n\n# This script is used to start tikv containers in
    kubernetes cluster\n\n# Use DownwardAPIVolumeFiles to store informations of the
    cluster:\n# https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/#the-downward-api\n#\n#
    \  runmode=\"normal/debug\"\n#\n\nset -uo pipefail\n\nANNOTATIONS=\"/etc/podinfo/annotations\"\n\nif
    [[ ! -f \"${ANNOTATIONS}\" ]]\nthen\n    echo \"${ANNOTATIONS} does't exist, exiting.\"\n
    \   exit 1\nfi\nsource ${ANNOTATIONS} 2>/dev/null\n\nrunmode=${runmode:-normal}\nif
    [[ X${runmode} == Xdebug ]]\nthen\n\techo \"entering debug mode.\"\n\ttail -f
    /dev/null\nfi\n\n# Use HOSTNAME if POD_NAME is unset for backward compatibility.\nPOD_NAME=${POD_NAME:-$HOSTNAME}\nARGS=\"--pd=http://${CLUSTER_NAME}-pd:2379
    \\\n--advertise-addr=${POD_NAME}.${HEADLESS_SERVICE_NAME}.${NAMESPACE}.svc:20160
    \\\n--addr=0.0.0.0:20160 \\\n--status-addr=0.0.0.0:20180 \\\n--advertise-status-addr=${POD_NAME}.${HEADLESS_SERVICE_NAME}.${NAMESPACE}.svc:20180
    \\\n--data-dir=/var/lib/tikv \\\n--capacity=${CAPACITY} \\\n--config=/etc/tikv/tikv.toml\n\"\n\nif
    [ ! -z \"${STORE_LABELS:-}\" ]; then\n  LABELS=\" --labels ${STORE_LABELS} \"\n
    \ ARGS=\"${ARGS}${LABELS}\"\nfi\n\necho \"starting tikv-server ...\"\necho \"/tikv-server
    ${ARGS}\"\nexec /tikv-server ${ARGS}\n"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: tikv
    app.kubernetes.io/instance: {{ template "milvus.tikv.fullname" .}}
    app.kubernetes.io/name: tikv
  name: {{ template "milvus.tikv.fullname" .}}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: tikv
    app.kubernetes.io/instance: {{ template "milvus.tikv.fullname" .}}
    app.kubernetes.io/name: tikv
  name: {{ template "milvus.tikv.fullname" . }}-headless
spec:
  clusterIP: None
  clusterIPs:
  - None
  ports:
  - name: peer
    port: 20160
    protocol: TCP
    targetPort: 20160
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/component: tikv
    app.kubernetes.io/instance: {{ template "milvus.tikv.fullname" . }}
    app.kubernetes.io/name: tikv
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: tikv
    app.kubernetes.io/instance: {{ template "milvus.tikv.fullname" . }}
    app.kubernetes.io/name: tikv
  name: {{ template "milvus.tikv.fullname" . }}
spec:
  podManagementPolicy: Parallel
  replicas: {{ .Values.tikv.tikv.replicaCount}}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: tikv
      app.kubernetes.io/instance: {{ template "milvus.tikv.fullname" . }}
      app.kubernetes.io/name: tikv
  serviceName: {{ template "milvus.tikv.fullname" . }}-headless
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "20180"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/component: tikv
        app.kubernetes.io/instance: {{ template "milvus.tikv.fullname" . }}
        app.kubernetes.io/name: tikv
    spec:
      containers:
      - command:
        - /bin/sh
        - /usr/local/bin/tikv_start_script.sh
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CLUSTER_NAME
          value: {{ template "milvus.tikv.fullname" . }}
        - name: HEADLESS_SERVICE_NAME
          value: {{ template "milvus.tikv.fullname" . }}-headless
        - name: CAPACITY
          value: "0"
        - name: TZ
          value: UTC
        image: {{ .Values.tikv.tikv.image }}
        imagePullPolicy: IfNotPresent
        name: tikv
        ports:
        - containerPort: 20160
          name: server
          protocol: TCP
        resources:
          {{- toYaml .Values.tikv.tikv.resources | nindent 10 }}
        volumeMounts:
        - mountPath: /etc/podinfo
          name: annotations
          readOnly: true
        - mountPath: /var/lib/tikv
          name: tikv
        - mountPath: /etc/tikv
          name: config
          readOnly: true
        - mountPath: /usr/local/bin
          name: startup-script
          readOnly: true
      volumes:
      - downwardAPI:
          defaultMode: 420
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.annotations
            path: annotations
        name: annotations
      - configMap:
          defaultMode: 420
          items:
          - key: config-file
            path: tikv.toml
          name: {{ template "milvus.tikv.fullname" . }}
        name: config
      - configMap:
          defaultMode: 420
          items:
          - key: startup-script
            path: tikv_start_script.sh
          name: {{ template "milvus.tikv.fullname" . }}
        name: startup-script
      {{- if not .Values.tikv.tikv.persistence.enabled }}
      - name: tikv
        emptyDir: {}
      {{- end }}
  updateStrategy:
    rollingUpdate:
      partition: 3
    type: RollingUpdate
  {{- if .Values.tikv.tikv.persistence.enabled }}
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: tikv
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.tikv.tikv.persistence.size }}
  {{- end }}
